#+TITLE: ML Internship 2022
#+SUBTITLE: Department for Cognition, Emotion & Research Methods \\
#+SUBTITLE: [[https://www.github.com/dominikpegler/internship_ml][code repo]]
#+AUTHOR: Dominik PEGLER
#+EMAIL: dominikpegler@posteo.org
# +SETUPFILE: setupfile_article_fls_en.org
#+FILETAGS: ml
#+CATEGORY: machine-learning
#+LANGUAGE: de
#+STARTUP: overview indent
#+OPTIONS: ^:nil toc:nil email:nil num:nil todo:t email:t tags:t broken-links:mark p:t html-style:nil
# +INFOJS_OPT: view:overview toc:nil mouse:#efefef buttons:t sdepth:nil
#+EXPORT_FILE_NAME: ~/Dropbox/org/internship_ml/docs/index.html
#+html: <center>
#+ATTR_HTML: :width 75px
file:./img/mlicon2.png
#+html: </center>
#+TOC: headlines 2


# kann im weiteren verlauf ins berichtformat transformiert werden.
# Praktikum März und April 2022
# 8 Wochen je 30h = 240h

* Tasks

** TODO Standard-ML-Script erstellen
DEADLINE: <2022-03-13 Sun>
   :LOGBOOK:
   CLOCK: [2022-03-08 Tue 19:55]--[2022-03-08 Tue 23:00] =>  3:05
   CLOCK: [2022-03-07 Mon 16:15]--[2022-03-07 Mon 19:19] =>  3:04
   CLOCK: [2022-03-06 Sun 22:15]--[2022-03-06 Sun 23:19] =>  1:04
   CLOCK: [2022-03-06 Sun 17:15]--[2022-03-06 Sun 18:05] =>  0:50
   CLOCK: [2022-03-05 Sat 11:00]--[2022-03-05 Sat 13:03] =>  2:03
   CLOCK: [2022-03-04 Fri 23:00]--[2022-03-05 Sat 00:30] =>  1:30
   CLOCK: [2022-03-04 Fri 14:00]--[2022-03-04 Fri 15:30] =>  1:30
   CLOCK: [2022-03-03 Thu 23:00]--[2022-03-04 Fri 00:25] =>  1:25
   CLOCK: [2022-03-03 Thu 11:45]--[2022-03-03 Thu 14:56] =>  3:11
   CLOCK: [2022-03-02 Wed 21:00]--[2022-03-02 Wed 23:55] =>  2:55
   CLOCK: [2022-03-02 Wed 12:20]--[2022-03-02 Wed 15:20] =>  3:00
   CLOCK: [2022-03-01 Tue 22:30]--[2022-03-01 Tue 23:50] =>  1:20
   CLOCK: [2022-03-01 Tue 19:35]--[2022-03-01 Tue 20:44] =>  1:09
   CLOCK: [2022-02-28 Mon 19:45]--[2022-02-28 Mon 23:43] =>  3:58
   :END:

#+begin_src python :session *py* :exports both :results output :dir /home/user/data/psy_misc/internship_ml

from sklearn.model_selection import GroupShuffleSplit
from sklearn.model_selection import RandomizedSearchCV
from sklearn.linear_model import ElasticNet
from get_data import get_housing_data
from utils import split_train_test
import time


def main():

    start = time.time()

    X, y = get_housing_data()

    hyperparams_grid = {"alpha": [1, 10, 50, 100, 150, 175, 200, 225, 250, 275,
                                  300, 325, 350, 375, 400, 450, 500, 700, 1000],
                        "l1_ratio": [0.01, 0.05, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7,
                                     0.8, 0.9, 0.95, 0.99]}

    reg = ElasticNet()

    # Outer CV
    outer_cv = GroupShuffleSplit(
        n_splits=5,
        test_size=0.2,
        random_state=0)

    # Iterate over main splitter
    for i_cv, (i_train, i_test) in enumerate(outer_cv.split(X, y, groups=X.index), start=1):

        y_train, y_test = split_train_test(y, i_train, i_test)
        X_train, X_test = split_train_test(X, i_train, i_test)

        print(f"Split {i_cv}")

        # Nested CV with parameter optimization
        search_reg = RandomizedSearchCV(
            estimator=reg, n_iter=100, param_distributions=hyperparams_grid, cv=5)
        result = search_reg.fit(X_train, y_train)

        print("best model:", result.best_estimator_)
        print("score on train data:", result.score(X_train, y_train))
        print("score on  test data:", result.score(X_test, y_test))

        print("\n")

    print(f"Execution time: {(time.time()-start):.3f}s")


if __name__ == "__main__":
    main()

#+end_src

   #+RESULTS:
   #+begin_example
   Split 1
   best model: ElasticNet(alpha=1, l1_ratio=0.95)
   score on train data: 0.638956432706804
   score on  test data: 0.6273295157467076


   Split 2
   best model: ElasticNet(alpha=1, l1_ratio=0.95)
   score on train data: 0.6402922976028544
   score on  test data: 0.6222885247909571


   Split 3
   best model: ElasticNet(alpha=1, l1_ratio=0.9)
   score on train data: 0.6232786644758622
   score on  test data: 0.6352241335010895


   Split 4
   best model: ElasticNet(alpha=1, l1_ratio=0.9)
   score on train data: 0.6222482016652948
   score on  test data: 0.6434799437340415


   Split 5
   best model: ElasticNet(alpha=1, l1_ratio=0.95)
   score on train data: 0.637586781580493
   score on  test data: 0.6340913881550586


   Execution time: 22.220s
   #+end_example

** TODO Bericht
DEADLINE: <2022-04-30 Sat>

*** Woche 1
Einführung, Data preprocessing & cross-validation, Scikit-learn-Dokumentation,
Regularisierte lineare Modelle (Ridge, Lasso etc.)
*** Woche 2
Literatur, Fortsetzung Script
*** Wochen 3--8

* Meetings

** TODO 2. Meeting mit Steyrl-Gruppe via Skype
SCHEDULED: <2022-03-15 Tue 11:00>
** DONE 2. Meeting mit David
CLOSED: [2022-03-08 Tue 22:05] SCHEDULED: <2022-03-08 Tue 10:00>
:LOGBOOK:
CLOCK: [2022-03-08 Tue 10:00]--[2022-03-08 Tue 10:50] =>  0:50
:END:
     1. Fortschritt beim Script
     2. Besprechen der Regressoren und Hyperparameter
     
** DONE 1. Meeting mit Steyrl-Gruppe via Skype
    CLOSED: [2022-03-02 Wed 11:35] SCHEDULED: <2022-03-02 Wed 11:00>
    :LOGBOOK:
    CLOCK: [2022-03-02 Wed 11:00]--[2022-03-02 Wed 11:35] =>  0:35
    :END:
- Vorstellung Gruppe und Masterarbeiten

** DONE 1. Meeting mit David via Zoom
    CLOSED: [2022-02-28 Mon 10:55] SCHEDULED: <2022-02-28 Mon 10:00>
    :LOGBOOK:
    CLOCK: [2022-02-28 Mon 10:00]--[2022-02-28 Mon 10:55] =>  0:55
    :END:

    Folgendes wurde besprochen:

    1. Thema des Praktikums
       1. Daten aus Bachelorarbeit mit ML-Methoden bearbeiten
          (regularisierte lineare Modelle & Random Forests)
       2. Weitere Themen sehen wir dann im weiteren Verlauf
    2. Allgemeines zu den Python Libraries und Arbeitsweise
    3. Erstes Ziel definiert: Standard-ML-Script erstellen, das vorerst nur
       1. Daten einliest,
       2. Daten in X und y, sowie in Trainings- und Testdaten teilt,
       3. Kreuzvalidierung (GroupShuffleSplit) vornimmt
	  1. Äußere Schleife (zur Vermeidung von Overfitting)
	  2. Innere Schleife (zum Finden der optimalen Hyperparameter)
    4. Nächster Termin vereinbart in zwei Tagen (zusammen mit seinen
       Masterbetreuungen)
   
* Literatur
:LOGBOOK:
CLOCK: [2022-03-07 Mon 19:20]--[2022-03-07 Mon 23:55] =>  4:35
CLOCK: [2022-03-06 Sun 18:45]--[2022-03-06 Sun 20:10] =>  1:25
CLOCK: [2022-03-05 Sat 19:05]--[2022-03-05 Sat 22:35] =>  3:30
:END:

- Géron, A. (2019). Hands-On Machine Learning with Scikit-Learn, Keras,
  and TensorFlow, 2nd Edition. O'Reilly. https://www.oreilly.com/library/view/hands-on-machine-learning/9781492032632

- scikit-learn developers (2022). Scikit-learn User Guide. https://scikit-learn.org/stable/user_guide.html



* code                                                             :noexport:

#   #+begin_src elisp

# (custom-set-faces
#  '(org-block-begin-line
#    ((t (:underline "#A7A6AA" :foreground "#008ED1" :background "#EAEAFF" :extend t))))
#  '(org-block
#    ((t (:background "#EFF0F1" :extend t))))
#  '(org-block-end-line
#    ((t (:overline "#A7A6AA" :foreground "#008ED1" :background "#EAEAFF" :extend t))))
#  )


#   #+end_src

  #+RESULTS:
